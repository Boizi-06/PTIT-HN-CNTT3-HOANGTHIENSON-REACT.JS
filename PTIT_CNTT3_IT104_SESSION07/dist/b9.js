class Account {
    constructor(initialBalance) {
        this.history = [];
        this.balance = initialBalance;
    }
    deposit(amount) {
        if (amount <= 0) {
            console.log("S·ªë ti·ªÅn n·∫°p ph·∫£i > 0");
            return;
        }
        this.balance += amount;
        this.history.push(`N·∫°p: +${amount} | S·ªë d∆∞: ${this.balance}`);
    }
    withdraw(amount) {
        if (amount <= 0) {
            console.log("S·ªë ti·ªÅn r√∫t ph·∫£i > 0");
            return;
        }
        if (amount > this.balance) {
            console.log("Kh√¥ng ƒë·ªß ti·ªÅn trong t√†i kho·∫£n!");
            return;
        }
        this.balance -= amount;
        this.history.push(`R√∫t: -${amount} | S·ªë d∆∞: ${this.balance}`);
    }
    getHistory() {
        console.log("üìú L·ªãch s·ª≠ giao d·ªãch:");
        this.history.forEach((item, index) => {
            console.log(`${index + 1}. ${item}`);
        });
    }
}
class CheckingAccount extends Account {
    constructor(initialBalance, overdraftLimit) {
        super(initialBalance);
        this.overdraftLimit = overdraftLimit;
    }
    withdraw(amount) {
        if (amount <= 0) {
            console.log("S·ªë ti·ªÅn r√∫t ph·∫£i > 0");
            return;
        }
        if (amount > this.balance + this.overdraftLimit) {
            console.log("V∆∞·ª£t qu√° h·∫°n m·ª©c th·∫•u chi!");
            return;
        }
        this.balance -= amount;
        this.history.push(`R√∫t: -${amount} | S·ªë d∆∞: ${this.balance}`);
    }
}
// --- Demo ---
const myAcc = new CheckingAccount(1000, 500);
myAcc.deposit(300);
myAcc.withdraw(500);
myAcc.withdraw(1200); // r√∫t qu√° s·ªë d∆∞ nh∆∞ng trong h·∫°n m·ª©c th·∫•u chi
myAcc.withdraw(700); // v∆∞·ª£t qu√° h·∫°n m·ª©c th·∫•u chi => b√°o l·ªói
myAcc.getHistory();
export {};
//# sourceMappingURL=b9.js.map